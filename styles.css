.container{
    background-color: #eee;
    width: 1000px;
    margin: 30px auto;

    /* turning an element into a grid container */
    display: grid;
    grid-template-rows: 150px 150px;
    grid-template-columns: 150px 150px 150px;
    /* grid-row-gap: 30px; */
    row-gap: 30px;
    /* grid-column-gap: 30px; */
    column-gap: 30px;
    /* latest versions of css recommend using gap property instead of prefixing the word grid*/
    gap: 30px;/*shorthand for the row-gap and column-gap*/

    /* the repeat keyword*/
    grid-template-rows: repeat(2, 150px);/*creats two rows 150px each*/
    grid-template-columns: repeat(3, 150px);

    /* and what if for the colums we wanted the third colum to have 300px instead of 150 */
    /* grid-template-columns: repeat(2, 150px) 300px; */

    /* or what if we wante the last track/column to fill the remaining space */
    /* this is quite similar to the flex property which if we set to 1, will expand and occupy the remaining space */
    /* we use the FR unit */
    grid-template-columns: repeat(2, 150px) 1fr;
    /* fr means a fraction of, which means we can have 0.5 fr, 0.75fr etc */

    /* another important use for fr would be as shown */
    grid-template-columns: repeat(3, 1fr);
    /* this will generate three equal columns each of the same space*/
    /* grid-template-columns: 1fr 2fr 1fr; */
}
.item{
    padding: 20px;
    font-size: 30px;
    font-family: sans-serif;
    color: white;
}
.item--1{
    background-color: orangered;

    /* positioning a grid item where you want it to be */
    /* grid-cell: an area between two adjacent row and column lines */
    grid-row-start: 2;/*the number of the row line we want in which we want it to start*/
    grid-row-end: 3;/*the numbering of the row we want it to end*/
    grid-column-start: 2;/*the numbering of the column we want it to start*/
    grid-column-end: 3;/*the numbering of the column we want it to end*/

    /* there is actually a short hand for the above two pairs as shown below respectively */
    grid-row: 2/3;
    grid-column: 2/3;

    /* spanning: increasing the grid-row or column properties increases the amount of tracks it occupies i.e */
    /* grid-column: 2/4; */
}
.item--2{
    background-color: yellowgreen;
    /* spanning this one 2 columns */
    grid-column: 1/span 2;
    /* to make it go from where it is all the way to the end, we do this: */
    grid-column: 1/-1;
}
.item--3{
    background-color: blueviolet;
}
.item--4{
    background-color: palevioletred;
}
.item--5{
    background-color: royalblue;

    /* repositioning this one to*/
    grid-row: 1/2;
    grid-column: 3/4;

    /* there is even a greater short hand for repositioning */
    /* grid-area: rs/cs/re/ce; */
    /* rs-row start, re-row end, cs-colum start ce- column end*/
    grid-area: 1/3/2/4 ;
}
.item--6{
    background-color: goldenrod;

    /* repositioning this one to */
    grid-row: 1/2;
    grid-column: 2/3;
    /* grid-area: 1/2/2/3; */
}


/* grid challenge */




.box{
    font-size: 1.5rem;
    font-weight:  bold; 
    color: white;
    background-color: red;
    padding: 20px;
}



/* naming the grid lines */
.container-test{
    width: 800px;
    margin: 30px auto;
    display: grid;

    /* named using square braces with sizes as shown below */
    grid-template-rows: [header-start] 100px [header-end box-start] 200px [box-end main-start] 400px [main-end footer-start] 100px [footer-end];

    /* when we have the repeat function, naming is done as shown below */
    grid-template-columns: repeat(3,[col-start] 1fr [col-end]) 200px [grid-end];
    grid-gap: 30px;
}

/* the header */
.box--1{
    /* grid-column: 1/-1; */

    /* since the name is coming from a repeat function, we might end up having conflicting column names, this is how css fixes this issue::assigning suffix numbers to the grid names  */
    grid-column: col-start 1 / grid-end;
}

/* the main content */
.box--6{
    grid-column: col-start 1/col-end 3;
}

/* the sidebar */
.box--5{
    grid-column: col-end 3/ grid-end;
    grid-row: box-start/main-end;
}
.box--7{
    grid-column: col-start 1/grid-end;
}




/* naming grid areas */
.container-test{
    width: 800px;
    margin: 30px auto;
    display: grid;

    grid-template-areas: "head head head head"
                          "box box box side"
                          "main main main side"
                          "foot foot foot foot";
}

/* the header */
.box--1{
    grid-area: head;
}

/* the main content */
.box--6{
    grid-area: main;
}

/* the sidebar */
.box--5{
    grid-area: side;
}
.box--7{
    grid-area: foot;
}



/* implicit and explicit grids */
.container-imp{
    width: 1000px;
    margin: 30px auto;
    background-color: #ccc;

    display: grid;
    grid-template-rows: repeat(2, 150px);
    grid-template-columns: repeat(2, 1fr);
    /* we have 8 items but the space we are defining is only fit for four items, , the remainig four items are added by the algorithm, this is 
    what we call the implicit grid */
    /* EXPLICIT GRID: is the part we define with the template rows and the template colums */
    /* IMPLICIT GRID: the part that is added automatically in order to fit the content that does not fit in the explicit grid */
    /* by default, implicit grids are added as rows */
    /* implicit grid can also be styled as follows */
    grid-auto-rows: 80px;
    /* grid-auto-columns: .5fr; */

    /* to change the implicit grids from rows to columns::we use the grid-auto-flow property*/
    /* grid-auto-flow: column; */

    gap: 30px;


    /* aligining grid items */
    align-items: center;/*vertically aligns items along the column axis. by default it is set to stretch*/
    /* others are center, end and start */
    justify-items: center;/*horizontally aligns items across the row axis. by default is is set to stretch*/
    /* we also have center, end and start */


    /* aligning tracks to the container */
    grid-template-rows: repeat(2, 100px);
    grid-template-columns: repeat(2, 250px);
    height: 1000px;

    justify-content: center;/*aligns the traacks inside of the container across the row axis i.e horizontally*/
    /* space-between space-around space-evenly start end center */
    align-content: center;/*aligns the tracks inside of  the container across    the  column axis i.e vertically */
}
    .itemimp{
    padding: 20px;
    color: white;
    font-family: sans-serif;
    font-size: 30px;
    background-color: orangered;
}
.item--14{
    background-color: crimson;
    grid-row: 2/span 3;

    /* align-self */
    align-self: start;
    /* justify-self */
    justify-self: start;
    /* we also have end, center */
} 
.item--17{
    background-color: palevioletred;
    grid-column: 1/-1;
}



/* min-content, max-content and the min-max() function */
.container-ms{
    width: 1000px;
    margin: 30px auto;
    background-color: #ccc;

    display: grid;
    /* grid-template-rows: repeat(2, min-content); */

    /* max-content::exact width so as to accomodate the content: it also tries to avoid line breaks */
    /* min-content:: the column track takes the largest width that is needed to fit the content without overflowing */
    /* minmax()::funtion that we pass two values in and the track will ensure it never goes outside these values */
    /* grid-template-columns: max-content 1fr 1fr min-content;
    grid-template-rows: repeat(2, minmax(150px, min-content));
    grid-template-columns: minmax(200px, 300px) repeat(3, 1fr); */
    grid-template-rows: repeat(2, minmax(150px, min-content));
    
    /* auto-fill and auto-fit */
    grid-template-columns: repeat(auto-fit, 100px);/*creates as many tracks with the desired width as fit into the container*/
    /* auto-fit collapses the tracks and gives them a width of zero.*/
    grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
}

.itemm{
    background-color: red;
    font-size: 30px;
    padding: 10px;
    color: white;
    text-transform: capitalize;
}
.item--121{ background-color: orangered;}
.item--122{ background-color: yellowgreen;}
.item--123{ background-color: blueviolet;}
.item--124{ background-color: palevioletred;}
.item--125{ background-color: royalblue;}
.item--126{ background-color: goldenrod;}
.item--127{ background-color: crimson;}
.item--128{ background-color: darkslategray;}


